apply plugin: "com.android.application"
apply plugin: 'com.google.gms.google-services'
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: 'com.facebook.react' // artık açık

import com.android.build.OutputFile


configurations.all {
    resolutionStrategy {
        force 'com.facebook.soloader:soloader:0.10.5'
    }
}
// New Architecture devre dışı
def isNewArchitectureEnabled() {
    return project.hasProperty("newArchEnabled") && project.property("newArchEnabled").toString().toLowerCase() == "true"
}

// React Native config
project.ext.react = [
    enableHermes: true,
    entryFile: "index.js"
]

def enableSeparateBuildPerCPUArchitecture = false
def enableProguardInReleaseBuilds = false
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    namespace "com.pasport"
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
    }

    defaultConfig {
        applicationId "com.pasport"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 4194385
        versionName "5.6.8"
        missingDimensionStrategy 'react-native-camera', 'general'
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }

    signingConfigs {
        debug {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
            }
        }
        release {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
            }
        }
    }

   buildTypes {
    debug {
        signingConfig signingConfigs.debug
    }

    release {
        signingConfig signingConfigs.debug

        // Vision Camera'nın native kodlarının minify sırasında korunması için:
        minifyEnabled true
        shrinkResources false

        // Gerekli ProGuard dosyalarını kullan
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
}


    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation("com.facebook.react:react-android")
    implementation 'org.jetbrains:annotations:16.0.2'
    implementation project(':react-native-vector-icons')
    implementation "androidx.fragment:fragment-ktx:1.6.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:2.0.21"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    implementation "androidx.appcompat:appcompat:1.0.0"

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.fbjni'
    }
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    if (project.ext.react.get("enableHermes", false)) {
        implementation("com.facebook.react:hermes-android:0.75.3")
    } else {
        implementation jscFlavor
    }
}

// New Architecture devre dışı olduğu için ReactAndroid ve Hermes kaynakları kullanılmıyor

// Run this once to be able to run the application with BUCK
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}

afterEvaluate {
    tasks.whenTaskAdded { task ->
        if (task.name == "generateReleaseLintVitalReportModel") {
            task.dependsOn copyReactNativeVectorIconFonts
        }
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle")
applyNativeModulesAppBuildGradle(project)
